{"version":3,"file":"alert.component.js","sourceRoot":"","sources":["../../src/alert/alert.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+D,eAAe,CAAC,CAAA;AAC/E,6BAA4B,gBAAgB,CAAC,CAAA;AAC7C,2BAAyB,qBAAqB,CAAC,CAAA;AAG/C;IAkBE,wBAAmB,OAAoB;QAlBzC,iBA4EC;QA3EC,yHAAyH;QACjH,SAAI,GAAW,SAAS,CAAC;QACjC,gDAAgD;QAExC,gBAAW,GAAY,KAAK,CAAC;QAIrC,oHAAoH;QAC5G,YAAO,GAAiC,IAAI,mBAAY,EAAkB,CAAC;QACnF,mFAAmF;QAC3E,aAAQ,GAAiC,IAAI,mBAAY,EAAkB,CAAC;QAE7E,aAAQ,GAAY,KAAK,CAAC;QAC1B,YAAO,GAAW,EAAE,CAAC;QACrB,sBAAiB,GAAyB,IAAI,mBAAY,EAAE,CAAC;QAGlE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAC,WAAoB;YACpD,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,WAAW,GAAG,mBAAmB,GAAG,EAAE,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,iCAAQ,GAAf;QAAA,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,wEAAwE;YACxE,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,EAC3B,QAAQ,CAAC,IAAI,CAAC,gBAA0B,EAAE,EAAE,CAAC,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAED,6EAA6E;IAC7E,gDAAgD;IAChD;;OAEG;IACI,8BAAK,GAAZ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,gbAYT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,0BAAW,GAAG;KACpB,EAF6F,CAE7F,CAAC;IACK,6BAAc,GAA2C;QAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAC1B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QACjC,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QACtC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;QAC9B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;KAC9B,CAAC;IAvEA;QAAC,qBAAQ,EAAE;;uDAAA;IAwEb,qBAAC;AAAD,CAAC,AA5ED,IA4EC;AA5EY,sBAAc,iBA4E1B,CAAA","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AlertConfig } from './alert.config';\nimport { OnChange } from '../utils/decorators';\n\n\nexport class AlertComponent implements OnInit {\n  /** Alert type. Provides one of four bootstrap supported contextual classes: `success`, `info`, `warning` and `danger` */\n   public type: string = 'warning';\n  /** If set, displays an inline \"Close\" button */\n  @OnChange()\n   public dismissible: boolean = false;\n  /** Number in milliseconds, after which alert will be closed */\n   public dismissOnTimeout: number | string;\n\n  /** This event fires immediately after close instance method is called, $event is an instance of Alert component. */\n   public onClose: EventEmitter<AlertComponent> = new EventEmitter<AlertComponent>();\n  /** This event fires when alert closed, $event is an instance of Alert component */\n   public onClosed: EventEmitter<AlertComponent> = new EventEmitter<AlertComponent>();\n\n  public isClosed: boolean = false;\n  public classes: string = '';\n  public dismissibleChange: EventEmitter<string> = new EventEmitter();\n\n  public constructor(_config: AlertConfig) {\n    Object.assign(this, _config);\n    this.dismissibleChange.subscribe((dismissible: boolean) => {\n      this.classes = this.dismissible ? 'alert-dismissible' : '';\n    });\n  }\n\n  public ngOnInit(): void {\n    if (this.dismissOnTimeout) {\n      // if dismissOnTimeout used as attr without binding, it will be a string\n      setTimeout(() => this.close(),\n        parseInt(this.dismissOnTimeout as string, 10));\n    }\n  }\n\n  // todo: animation ` If the .fade and .in classes are present on the element,\n  // the alert will fade out before it is removed`\n  /**\n   * Closes an alert by removing it from the DOM.\n   */\n  public close(): void {\n    if (this.isClosed) {\n      return;\n    }\n\n    this.onClose.emit(this);\n    this.isClosed = true;\n    this.onClosed.emit(this);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'alert,ngx-alert',\n  template: `\n<template [ngIf]=\"!isClosed\">\n  <div [class]=\"'alert alert-' + type\" role=\"alert\" [ngClass]=\"classes\">\n    <template [ngIf]=\"dismissible\">\n      <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"close()\">\n        <span aria-hidden=\"true\">&times;</span>\n        <span class=\"sr-only\">Close</span>\n      </button>\n    </template>\n    <ng-content></ng-content>\n  </div>\n</template>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlertConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'type': [{ type: Input },],\n'dismissible': [{ type: Input },],\n'dismissOnTimeout': [{ type: Input },],\n'onClose': [{ type: Output },],\n'onClosed': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}